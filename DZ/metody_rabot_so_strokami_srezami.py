print()
mystr = str ('Я ХоЧу нА МоРе.')
print(mystr, ' - наша исходная строка')
print()

#Методы для изменения регистра строки:--------------------------------------------------------------------------------
print ('Методы изменения регистра строки:')

'''str.capitalize()-переводит первый символ строки str в верхний регистр, остальные — в нижний'''
#удобно использовать, например, для грамотного написания каждой строки с большой буквы.
print (mystr.capitalize(), ('- метод .capitalize (первый символ выведен на экран в верхнем регистре)'))


'''str.lower() - переводит все буквенные символы оригинальной строки str в нижний регистр'''
#удобно использовать, например, когда необходим только нижний регистр.
print (mystr.lower(), ('- метод .lower (все символы строки переведены в нижний регистр)'))


'''str.upper() - преобразует все буквенные символы строки str в верхний регистр'''
#удобно использовать, например, когда необходим только верхний регистр.
print (mystr.upper(), ('- метод .upper (все символы строки переведены в верхний регистр)'))


'''str.title() - преобразует первые буквы каждого слова в строке str в верхний регистр (а остальные буквы слов 
переводит в нижний регистр)'''
#удобно использовать, например, когда необходимо чтобы каждое слово начиналось с заглавной буквы
print (mystr.title(), ('- метод .title (все первые символы каждого слова нашей строки переведены в верхний регистр)'))


'''str.swapcase() - преобразует буквенные символы строки str, меняя их регистр на противоположный'''
#удобно использовать, например, когда необходимо отобразить обратный регистр строки
print (mystr.swapcase(), ('- метод .swapcase (все символы нашей строки поменяли регистр на противоположный)'))
print()


#Методы поиска подстроки в строке:-------------------------------------------------------------------------------------
print ('Методы поиска подстроки в строке:')

'''str.count(pattern [, startIndex [, endIndex]]) — определяет количество вхождений фрагмента pattern в строку str
(или в ее часть при задании диапазона поиска)'''
#удобно использовать для поиска количества определенных значений в строке или ее части
print (mystr.count('н'), ('- метод .count (указано количество в нашей строке символа "н")'))


''''str.find(pattern [, startIndex [, endIndex]]) — используется для поиска в строке str нужного фрагмента'''
#удобно использовать для поиска местонахождения определенного значения в строке или ее части
print (mystr.find('н'), ('- метод .find (указано положение (индекс) где первый раз встречается в нашей строке символ "н")'))


'''str.index(pattern [, startIndex [, endIndex]]) — работа метода аналогична методу .find(), отличие — в вызове 
исключения ValueError в случае, когда фрагмент pattern не найден (не входит в состав str)'''
#удобно использовать для поиска местонахождения определенного значения в строке или ее части
print (mystr.index('Я'), ('- метод .index (указано положение в нашей строке значения "Я") (при отсутствии программа '
                          'завершается с выводом на экран ValueError)'))


'''str.rfind(pattern [, startIndex [, endIndex]]) — используется для поиска в строке str нужного фрагмента
pattern, начиная с конца строки str'''
#удобно использовать для поиска местонахождения определенного значения в строке или ее части, но с конца
print (mystr.rfind('н'), ('- метод .rfind (указано положение (индекс) где первый раз встречается в нашей строке символ "н", '
                          'но поиск идет с конца строки)'))


'''str.rindex(pattern [, startIndex [, endIndex]]) работа метода аналогична методу .rfind(), отличие — в вызове 
исключения ValueError в случае, когда фрагмент pattern не найден (не входит в состав str).'''
#удобно использовать для поиска местонахождения определенного значения в строке или ее части, но с конца
print (mystr.rindex('Я'), ('- метод .rindex (указано положение в нашей строке значения "Я", но поиск идет с конца строки) '
                           '(при отсутствии программа завершается с выводом на экран ValueError)'))
print()


#Методы проверки начала (окончания) строк:
print ('Методы проверки начала (окончания) строк:')

'''str.endswith(pattern [, startIndex [, endIndex]]) — определяет, заканчивается ли строка str указанным фрагментом pattern.'''
#удобно использовать для проверки заврешается ли строка необходимым символом
print (mystr.endswith('.'), ('- метод .endswith (указано правда ли что наша строка заканчивается символом ".")'))


'''str.startswith(pattern [, startIndex [, endIndex]]) — определяет, начинается ли строка str с указанного фрагмента 
pattern.'''
#удобно использовать для проверки начинается ли строка необходимым символом
print (mystr.startswith('.'), ('- метод .startswith (указано правда ли что наша строка начинается символом ".")'))
print()


#Методы проверки строк---------------------------------------------------------------------------------------
print ('Методы проверки строк:')

'''str.isalnum() — проверяет, состоит ли строка str только из буквенных и цифровых символов'''
#удобно использовать для проверки только  буквенные ицифровые символы ли введены в строке
print (mystr.isalnum(), ('- метод .isalnum (указано правда ли что наша строка содержит только буквенные цифровые символы)'))


'''str.isalpha() — проверяет, состоит ли строка str только из буквенных символов'''
#удобно использовать для проверки только буквенные символы ли введены в строке
print (mystr.isalpha(), ('- метод .isalpha (указано правда ли что наша строка содержит только буквенные символы)'))


'''str.isdigit() — проверяет, состоит ли строка str только из цифровых символов (используется для проверки, 
является ли строка str числом)'''
#удобно использовать для проверки только цифровые символы ли введены в строке
print (mystr.isdigit(), ('- метод .isdigit (указано правда ли что наша строка содержит только цифровые символы)'))


'''str.islower() проверяет, находятся ли все буквенные символы строки str в нижнем регистре (символы строки 
str, которые не являются буквой алфавита — игнорируются данной проверкой).'''
#удобно использовать для проверки только цифровые символы ли введены в строке
print (mystr.islower(), ('- метод .islower (указано правда ли что наша строка содержит только буквы в нижнем регистре)'))


'''str.isspace() проверяет, что в состав строки str входят только пробельные символы, к которым относятся 
символы пробела ' ', табуляции '\t' и перехода на новую строку '\n'.'''
#удобно использовать для проверки состоит ли наша строка только из пробелов и перехода на новую строку,
#то есть есть ли вооще строка (потому что пробелы не отображаются)
print (mystr.isspace(), ('- метод .isspace (указано правда ли что наша строка содержит только пробельные символы)'))


'''str.istitle() проверяет, начинается ли каждое слово строки str с символа в верхнем регистре'''
#удобно использовать для проверки начинается ли каждое слово нашей строки с символа в верхнем регистре (ввод ФИО)
print (mystr.istitle(), ('- метод .istitle (указано правда ли что каждое слово нашей строки начинается с символа в верхнем регистре)'))


'''str.isupper() определяет, находятся ли все буквенные символы строки str в верхнем регистре.'''
#удобно использовать для проверки каждый ли буквенный символ нашей строки в верхнем регистре  (ввод данных где важен только верхний регистр)
print (mystr.isupper(), ('- метод .isupper (указано правда ли что каждое слово нашей строки начинается с символа в верхнем регистре)'))
print()


#Методы форматирования строк---------------------------------------------------------------------------------------
print ('Методы форматирования строк:')

'''str.center(width [, fillchar]) дополняет (расширяет) строку str до указанной длины width, возвращаемый результат — 
расширенная копия строки str. Если параметр fillchar указан, то он будет использован, как символ 
заполнения, иначе — отступы заполняются пробелами'''
#удобно использовать для приведения всей строки к одному форматы отображения
print (mystr.center(40, '*'), ('- метод .center (помещают нашу строку в центр и заполняет указанную длину указанным символом)'))


'''str.expandtabs(tabsize = 8) возвращает копию строки str, в которой каждый символ табуляции ('\t') заменен на пробел, количество которых задается через 
параметр tabsize.'''
mystr2 = str ('Я ХоЧу\t нА МоРе.') #удобно использовать для выравнивания текста и улучшения читаемости
print (mystr2.expandtabs(tabsize=5), ('- метод .expandtabs (заменяет символы табуляции указанным количеством пробелов, что может улучшить читаемость)'))


'''str.ljust(width [, fillchar]) возвращает выровненную по левому краю копию строки str указанной ширины width.'''
#удобно использовать для выравнивания по левому краю и определенного форматиррования строки
print (mystr.ljust(40, '*'), ('- метод .ljust (выравнивает нашу строку по левому краю и заполняет указанную длину указанным символом)'))


'''str.rjust(width [, fillchar]) возвращает выровненную по правому краю копию строки str указанной ширины width.'''
#удобно использовать для выравнивания по правому краю и определенного форматиррования строки
print (mystr.rjust(40, '*'), ('- метод .rjust (выравнивает нашу строку по правому краю и заполняет указанную длину указанным символом)'))


'''str.lstrip([characters]) возвращает копию строки str, удаляя начальные символы (слева), указанные в качестве аргумента characters.'''
#удобно использовать для удаления пробелов и\или начальных символов слева в строке
print (mystr.lstrip('Я '), ('- метод .lstrip (удаляет начальный символ "Я" и пробел слева)'))


'''str.rstrip([characters]) возвращает копию строки str, удаляя начальные символы (справа), указанные в качестве аргумента characters.'''
#удобно использовать для удаления пробелов и\или начальных символов справа в строке
print (mystr.rstrip('е. '), ('- метод .rstrip (удаляет заверщающий символ "е" и точку справа)'))


''''str.strip([characters]) возвращает копию строки str, удаляя указанные в аргументе начальные символы слева и заверщающие справа.'''
#удобно использовать для удаления в строке пробелов, а также любых начальных символов слева и заврещающих справа
print (mystr.strip('Я е.'), ('- метод .strip (удаляет начальный символ "Я" и пробел слева, а также заверщающий символ "е" и точку справа)'))


'''метод str.zfill(width) - дополняет строку слева символами «0»'''
#удобно использовать для форматирования чисел и работы с датами
print (mystr.zfill(30), ('- метод .zfill (дополняет строку слева символом "0" до указанной длины)'))